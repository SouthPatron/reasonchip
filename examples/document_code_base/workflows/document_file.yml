
- chip: reasoning.openai.chat.chat_completion
  params:
    client_settings:
      api_key: "{{ secrets.openai.api_key }}"
      organization: "{{ secrets.openai.org_id }}"
    create_params:
      model: "gpt-4.1-mini"
      messages:
        - role: system
          content: |
            You are a senior developer who has been tasked with documenting and
            adding logging to a python file.

            These are your instructions:

            HEADER
            ------

            Ensure that all files include this at the top of the file.

            ```
            # SPDX-License-Identifier: GPL-3.0-or-later
            # Copyright (C) 2025 South Patron LLC
            # This file is part of ReasonChip and licensed under the GPLv3+.
            # See <https://www.gnu.org/licenses/> for details.
            ```

            Obviously, a shebang should come first. Keep a newline after
            the above header.


            LOGGING
            -------

            All files should import logging a global logger should be defined:

            ```
            import logging

            log = logging.getLogger(__name__)
            ```

            All logging within the file should reference this log.
            If there is an existing logging approach, replace it with this
            approach. For example:

            ```
            log.info("Doing something")
            ```

            Do not add a logger into the `__init__.py`. If one exists within
            there and it's not being used, remove it.

            Do NOT add additional logging into any file. Just make sure any
            existing logging uses the log and this approach.


            METHODS OR FUNCTIONS
            --------------------

            The docstring of a method or function should give a brief description
            of what it does along with any notes.

            All parameters should be documented using sphinx notation, for
            example:

            ```
            def add(a: int, b: int, do_good: bool) -> typing.Optional[int]:
              """
              This function adds two numbers and returns the result.

              :param a: The first number to add.
              :param b: The second number to add.
              :param do_good: Return the correct result if True else return None

              :return: The result if do_good else None
              """
              return (a + b) if do_good else None


            COMMENTS
            --------

            Add brief and terse comments to code to give an idea of what the
            code is trying to do from a high-level approach:

            ```
            # First we stop all the incoming clients
            for t in self._client_transports:
                await t.stop_server()

            # Then we stop all the workers
            for t in self._worker_transports:
                await t.stop_server()
            ```

            Generally only add comments around conceptual blocks as demonstrated
            above: Something happens to clients, then something happens to
            workers.


            YOUR RESPONSE
            -------------

            Reply in JSON.

            If the file:
              - Is adequately compliant with your instructions;
              - Appears to already meet the requirements;
              - Only has trivial differences;
            Then do not update the file and return an empty content response.

            Otherwise, return the complete file with your modifications.
            Do not change any logic or reasoning or fix any bugs you can see.
            Just do what has been requested.

        - role: user
          content: |
            The filename is: `{{ params.filename }}`

            [--------------- FILE CONTENT: START ---------- ]
            {{ params.content }}
            [--------------- FILE CONTENT: END ------------ ]

      response_format:
        type: "json_schema"
        json_schema:
          name: "myobj"
          strict: true
          schema:
            type: "object"
            properties:
              changed:
                type: "string"
                description: "YES or NO depending on whether you performed changes"
              contents:
                type: "string"
                description: "A blank string or the full content of the file with your changes"
            additionalProperties: false
            required:
              - changed
              - contents
  store_result_as: response

- when: "response.status != 'OK'"
  terminate:
    status: 'ERROR'
    error_message: 'Response from OpenAI: {{ response }}'

- chip: utils.json.loads
  params:
    string: "{{ response.completion.choices[0].message.content }}"
  store_result_as: rc

- when: "rc.status != 'OK'"
  terminate:
    status: 'ERROR'
    error_message: 'Unable to parse response: {{ response }}'

- when: "rc.result['changed'] == 'NO'"
  return:
    status: 'UNCHANGED'

- return:
    status: 'CHANGED'
    content: "{{ rc.result['contents'] }}"

