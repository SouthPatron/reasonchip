# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright (C) 2025 South Patron LLC
# This file is part of ReasonChip and licensed under the GPLv3+.
# See <https://www.gnu.org/licenses/> for details.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings
import logging

log = logging.getLogger(__name__)

from . import reasonchip_pb2 as reasonchip__pb2

GRPC_GENERATED_VERSION = "1.68.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    log.error(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in reasonchip_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in reasonchip_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class ReasonChipServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """
        Constructor.

        :param channel: A grpc.Channel.
        """
        log.debug("Initializing ReasonChipServiceStub with channel %s", channel)
        self.EstablishConnection = channel.stream_stream(
            "/reasonchip.ReasonChipService/EstablishConnection",
            request_serializer=reasonchip__pb2.ReasonChipPacket.SerializeToString,
            response_deserializer=reasonchip__pb2.ReasonChipPacket.FromString,
            _registered_method=True,
        )


class ReasonChipServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EstablishConnection(self, request_iterator, context):
        """
        Bidirectional streaming RPC

        :param request_iterator: An iterator over request messages.
        :param context: RPC context.

        :raises NotImplementedError: Always raised to indicate method is not implemented.
        """
        log.warning("EstablishConnection method not implemented called.")
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ReasonChipServiceServicer_to_server(servicer, server):
    """
    Adds the servicer to the grpc server.

    :param servicer: The servicer instance to add.
    :param server: The grpc server instance.
    """
    log.debug("Adding ReasonChipServiceServicer to server %s", server)
    rpc_method_handlers = {
        "EstablishConnection": grpc.stream_stream_rpc_method_handler(
            servicer.EstablishConnection,
            request_deserializer=reasonchip__pb2.ReasonChipPacket.FromString,
            response_serializer=reasonchip__pb2.ReasonChipPacket.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "reasonchip.ReasonChipService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "reasonchip.ReasonChipService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class ReasonChipService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EstablishConnection(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        """
        Experimental API method to establish a bidirectional stream connection.

        :param request_iterator: An iterator over request messages.
        :param target: The server address.
        :param options: Channel options.
        :param channel_credentials: Credentials for channel.
        :param call_credentials: Credentials for calls.
        :param insecure: Use insecure channel if True.
        :param compression: Compression algorithm.
        :param wait_for_ready: Wait for ready flag.
        :param timeout: Timeout for the RPC call.
        :param metadata: Metadata associated with the call.

        :return: A grpc stream-stream call object.
        """
        log.debug(
            "Calling experimental EstablishConnection method to target %s",
            target,
        )
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/reasonchip.ReasonChipService/EstablishConnection",
            reasonchip__pb2.ReasonChipPacket.SerializeToString,
            reasonchip__pb2.ReasonChipPacket.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
